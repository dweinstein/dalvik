var searchIndex = {};
searchIndex["dalvik"] = {"doc":"","items":[[3,"Dex","dalvik","",null,null],[12,"header","","",0,null],[12,"strings","","",0,null],[12,"types","","",0,null],[12,"prototypes","","",0,null],[12,"fields","","",0,null],[12,"methods","","",0,null],[12,"classes","","",0,null],[3,"Prototype","","",null,null],[3,"Field","","",null,null],[3,"Method","","",null,null],[3,"ClassDef","","",null,null],[0,"error","","",null,null],[3,"Error","dalvik::error","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[12,"1","","Contains the error chain and the backtrace.",1,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"Io","","",2,null],[13,"FromUTF8","","",2,null],[13,"IncorrectMagic","","Incorrect dex magic number.",2,null],[13,"HeaderFileSizeMismatch","","Mismatch between file size in header and real file size.",2,null],[13,"InvalidFileSize","","Invalid file size.",2,null],[13,"InvalidEndianTag","","Invalid endian tag.",2,null],[13,"IncorrectHeaderSize","","Incorrect header size.",2,null],[13,"InvalidOffset","","Invalid offset.",2,null],[13,"MismatchedOffsets","","Mismatched offsets.",2,null],[13,"InvalidAccessFlags","","Invalid access flags.",2,null],[13,"InvalidItemType","","Invalid item type.",2,null],[13,"InvalidVisibility","","Invalid visibility modifier.",2,null],[13,"InvalidValue","","Invalid value.",2,null],[13,"StringSizeMismatch","","String size mismatch.",2,null],[13,"InvalidLeb128","","Invalid uleb128.",2,null],[13,"Header","","Generic header error.",2,null],[13,"Map","","Generic map error.",2,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure,\nwhich returns *some type that can be converted to `ErrorKind`*, boxes\nthe original error to store as the cause, then returns a new error\ncontaining the original error.",3,null],[11,"fmt","","",1,null],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"kind","","",1,null],[11,"iter","","",1,null],[11,"backtrace","","",1,null],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,null],[11,"iter","","Iterates over the error chain.",1,null],[11,"backtrace","","Returns the backtrace associated with this error.",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","A string describing the error kind.",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"header","dalvik","",null,null],[3,"Header","dalvik::header","Dex header representantion structure.",null,null],[12,"magic","","",4,null],[12,"checksum","","",4,null],[12,"signature","","",4,null],[12,"file_size","","",4,null],[12,"header_size","","",4,null],[12,"endian_tag","","",4,null],[12,"link_size","","",4,null],[12,"link_offset","","",4,null],[12,"map_offset","","",4,null],[12,"string_ids_size","","",4,null],[12,"string_ids_offset","","",4,null],[12,"type_ids_size","","",4,null],[12,"type_ids_offset","","",4,null],[12,"prototype_ids_size","","",4,null],[12,"prototype_ids_offset","","",4,null],[12,"field_ids_size","","",4,null],[12,"field_ids_offset","","",4,null],[12,"method_ids_size","","",4,null],[12,"method_ids_offset","","",4,null],[12,"class_defs_size","","",4,null],[12,"class_defs_offset","","",4,null],[12,"data_size","","",4,null],[12,"data_offset","","",4,null],[17,"ENDIAN_CONSTANT","","",null,null],[17,"REVERSE_ENDIAN_CONSTANT","","",null,null],[11,"from_file","","Obtains the header from a Dex file.",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_reader","","Obtains the header from a Dex file reader.",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"read_data","","",4,null],[11,"is_magic_valid","","Checks if the dex magic number given is valid.",4,null],[11,"get_magic","","Gets the magic value.",4,null],[11,"get_dex_version","","Gets Dex version.",4,null],[11,"get_checksum","","Gets file checksum.",4,null],[11,"get_signature","","Gets file SHA-1 signature.",4,null],[11,"get_file_size","","Gets file size.",4,null],[11,"get_header_size","","Gets header size, in bytes.",4,null],[11,"get_endian_tag","","Gets the endian tag.",4,null],[11,"is_little_endian","","Gets wether the file is in little endian or not.",4,null],[11,"is_big_endian","","Gets wether the file is in big endian or not.",4,null],[11,"get_link_size","","Gets the link section size",4,null],[11,"get_link_offset","","Gets the link section offset.",4,null],[11,"get_map_offset","","Gets the map section offset.",4,null],[11,"get_string_ids_size","","Gets the string IDs list size.",4,null],[11,"get_string_ids_offset","","Gets the string IDs list offset.",4,null],[11,"get_type_ids_size","","Gets the type IDs list size.",4,null],[11,"get_type_ids_offset","","Gets the type IDs list offset.",4,null],[11,"get_prototype_ids_size","","Gets the prototype IDs list size.",4,null],[11,"get_prototype_ids_offset","","Gets the prototype IDs list offset.",4,null],[11,"get_field_ids_size","","Gets the field IDs list size.",4,null],[11,"get_field_ids_offset","","Gets the field IDs list offset.",4,null],[11,"get_method_ids_size","","Gets the method IDs list size.",4,null],[11,"get_method_ids_offset","","Gets the method IDs list offset.",4,null],[11,"get_class_defs_size","","Gets the class definition list size.",4,null],[11,"get_class_defs_offset","","Gets the class definition list offset.",4,null],[11,"get_data_size","","Gets the data section size.",4,null],[11,"get_data_offset","","Gets the data secrion offset.",4,null],[11,"generate_offset_map","","",4,null],[11,"verify_file","","Verifies the file at the given path.",4,null],[11,"verify_reader","","Verifies the file in the given reader.",4,null],[11,"fmt","","",4,null],[0,"sizes","dalvik","",null,null],[17,"HEADER_SIZE","dalvik::sizes","",null,null],[17,"STRING_ID_ITEM_SIZE","","",null,null],[17,"TYPE_ID_ITEM_SIZE","","",null,null],[17,"PROTO_ID_ITEM_SIZE","","",null,null],[17,"FIELD_ID_ITEM_SIZE","","",null,null],[17,"METHOD_ID_ITEM_SIZE","","",null,null],[17,"CLASS_DEF_ITEM_SIZE","","",null,null],[17,"MAP_ITEM_SIZE","","",null,null],[17,"TYPE_ITEM_SIZE","","",null,null],[17,"ANNOTATION_SET_REF_SIZE","","",null,null],[17,"ANNOTATION_SET_ITEM_SIZE","","",null,null],[0,"types","dalvik","",null,null],[0,"offset_map","","",null,null],[3,"OffsetMap","dalvik::offset_map","Structure representing a list of offsets.",null,null],[12,"inner","","",5,null],[4,"OffsetType","","Type of offset.",null,null],[13,"StringIdList","","",6,null],[13,"TypeIdList","","",6,null],[13,"PrototypeIdList","","",6,null],[13,"FieldIdList","","",6,null],[13,"MethodIdList","","",6,null],[13,"ClassDefList","","",6,null],[13,"Map","","",6,null],[13,"TypeList","","",6,null],[13,"AnnotationSetList","","",6,null],[13,"AnnotationSet","","",6,null],[13,"Annotation","","",6,null],[13,"AnnotationsDirectory","","",6,null],[13,"ClassData","","",6,null],[13,"Code","","",6,null],[13,"StringData","","",6,null],[13,"DebugInfo","","",6,null],[13,"EncodedArray","","",6,null],[13,"Link","","",6,null],[11,"fmt","","",5,null],[11,"with_capacity","","Creates a new offset map with the given initial capacity. It will allocate space for\nexactly `capacity` offsets.",5,{"inputs":[{"name":"usize"}],"output":{"name":"offsetmap"}}],[11,"insert","","Inserts a new offset in the offset map.",5,null],[11,"get_offset","","Gets the given offset, if it exists at the map.",5,null],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"assert_receiver_is_total_eq","","",6,null],[0,"read","dalvik","Dex file reader module.",null,null],[3,"DexReader","dalvik::read","Structure for reading a Dex file in a fast way.",null,null],[12,"reader","","Reader to use to read data.",7,null],[12,"current_offset","","Current reading offset.",7,null],[12,"header","","Header of the dex file.",7,null],[12,"offset_map","","Map to store all known offsets in the Dex file.",7,null],[12,"unknown_data","","Vector of chunks of binary data that were not understood when reading sequencially.",7,null],[12,"string_ids","","String ID list.",7,null],[12,"type_ids","","Type ID list.",7,null],[12,"prototype_ids","","Prototype ID list.",7,null],[12,"field_ids","","Field ID list.",7,null],[12,"method_ids","","Method ID list.",7,null],[12,"class_defs","","Class definition list",7,null],[12,"type_lists","","Type list.",7,null],[12,"annotation_set_ref_list","","List of lists of references to annotation set offsets.",7,null],[12,"annotation_sets","","Set of annotations.",7,null],[12,"classes","","Class data list.",7,null],[12,"code_segments","","Code segment list.",7,null],[12,"strings","","String list.",7,null],[12,"debug_info","","Debug information list.",7,null],[12,"annotations","","Annotation list.",7,null],[12,"arrays","","Array list.",7,null],[12,"annotations_directories","","Annotations directories.",7,null],[3,"Map","","The struct representing the *dex* file Map.",null,null],[12,"map_list","","",8,null],[5,"read_uleb128","","Reads a uleb128 from a reader.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_uleb128p1","","Reads a uleb128p1 from a reader.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"read_sleb128","","Reads a sleb128 from a reader.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"types","","",null,null],[3,"PrototypeIdData","dalvik::read::types","Data structure representing the `proto_id_item` type.",null,null],[12,"shorty_index","","",9,null],[12,"return_type_index","","",9,null],[12,"parameters_offset","","",9,null],[3,"FieldIdData","","Structure representing the `field_id_item` type.",null,null],[12,"class_index","","",10,null],[12,"type_index","","",10,null],[12,"name_index","","",10,null],[3,"MethodIdData","","Structure representing the `method_id_item` type.",null,null],[12,"class_index","","",11,null],[12,"prototype_index","","",11,null],[12,"name_index","","",11,null],[3,"AccessFlags","","",null,null],[12,"bits","","",12,null],[3,"ClassDefData","","",null,null],[12,"class_id","","",13,null],[12,"access_flags","","",13,null],[12,"superclass_id","","",13,null],[12,"interfaces_offset","","",13,null],[12,"source_file_id","","",13,null],[12,"annotations_offset","","",13,null],[12,"class_data_offset","","",13,null],[12,"static_values_offset","","",13,null],[3,"Array","","Array",null,null],[12,"inner","","",14,null],[3,"AnnotationElement","","Annotation element.",null,null],[12,"name","","",15,null],[12,"value","","",15,null],[3,"Annotation","","Annotation.",null,null],[12,"type_id","","",16,null],[12,"elements","","",16,null],[3,"AnnotationItem","","Annotation item",null,null],[12,"visibility","","",17,null],[12,"annotation","","",17,null],[3,"FieldAnnotations","","",null,null],[12,"field_id","","",18,null],[12,"offset","","",18,null],[3,"MethodAnnotations","","",null,null],[12,"method_id","","",19,null],[12,"offset","","",19,null],[3,"ParameterAnnotations","","",null,null],[12,"method_id","","",20,null],[12,"offset","","",20,null],[3,"AnnotationsDirectory","","",null,null],[12,"class_annotations_offset","","",21,null],[12,"field_annotations","","",21,null],[12,"method_annotations","","",21,null],[12,"parameter_annotations","","",21,null],[3,"MapItem","","",null,null],[12,"item_type","","",22,null],[12,"size","","",22,null],[12,"offset","","",22,null],[3,"Field","","",null,null],[12,"field_id","","",23,null],[12,"access_flags","","",23,null],[3,"Method","","",null,null],[12,"method_id","","",24,null],[12,"access_flags","","",24,null],[12,"code_offset","","",24,null],[3,"ClassData","","Class data structure.",null,null],[12,"static_fields","","",25,null],[12,"instance_fields","","",25,null],[12,"direct_methods","","",25,null],[12,"virtual_methods","","",25,null],[3,"StringReader","","Dex string reader.",null,null],[3,"DebugInfo","","Debug information structure.",null,null],[12,"line_start","","",26,null],[12,"parameter_names","","",26,null],[12,"bytecode","","",26,null],[3,"DebugBytecode","","Debug bytecode.",null,null],[12,"bytecode","","",27,null],[3,"CodeItem","","Code Item structure",null,null],[12,"registers_size","","",28,null],[12,"ins_size","","",28,null],[12,"outs_size","","",28,null],[12,"debug_info_offset","","",28,null],[12,"insns","","",28,null],[12,"tries","","",28,null],[12,"handlers","","",28,null],[3,"TryItem","","Try item structure.",null,null],[12,"start_address","","",29,null],[12,"insn_count","","",29,null],[12,"handler_offset","","",29,null],[3,"CatchHandler","","Struct representing a catch handler.",null,null],[12,"handlers","","",30,null],[12,"catch_all_addr","","",30,null],[3,"HandlerInfo","","",null,null],[12,"type_id","","",31,null],[12,"addr","","",31,null],[4,"Visibility","","Annotation visibility",null,null],[13,"Build","","",32,null],[13,"Runtime","","",32,null],[13,"System","","",32,null],[4,"Value","","Value.",null,null],[13,"Byte","","",33,null],[13,"Short","","",33,null],[13,"Char","","",33,null],[13,"Int","","",33,null],[13,"Long","","",33,null],[13,"Float","","",33,null],[13,"Double","","",33,null],[13,"String","","",33,null],[13,"Type","","",33,null],[13,"Field","","",33,null],[13,"Method","","",33,null],[13,"Enum","","",33,null],[13,"Array","","",33,null],[13,"Annotation","","",33,null],[13,"Null","","",33,null],[13,"Boolean","","",33,null],[4,"ItemType","","",null,null],[13,"Header","","",34,null],[13,"StringId","","",34,null],[13,"TypeId","","",34,null],[13,"ProtoId","","",34,null],[13,"FieldId","","",34,null],[13,"MethodId","","",34,null],[13,"ClassDef","","",34,null],[13,"Map","","",34,null],[13,"TypeList","","",34,null],[13,"AnnotationSetList","","",34,null],[13,"AnnotationSet","","",34,null],[13,"ClassData","","",34,null],[13,"Code","","",34,null],[13,"StringData","","",34,null],[13,"DebugInfo","","",34,null],[13,"Annotation","","",34,null],[13,"EncodedArray","","",34,null],[13,"AnnotationsDirectory","","",34,null],[4,"DebugInstruction","","Debug state machine instruction.",null,null],[13,"EndSequence","","",35,null],[13,"AdvancePc","","",35,null],[12,"addr_diff","dalvik::read::types::DebugInstruction","",35,null],[13,"AdvanceLine","dalvik::read::types","",35,null],[12,"line_diff","dalvik::read::types::DebugInstruction","",35,null],[13,"StartLocal","dalvik::read::types","",35,null],[12,"register_num","dalvik::read::types::DebugInstruction","",35,null],[12,"name_id","","",35,null],[12,"type_id","","",35,null],[13,"StartLocalExtended","dalvik::read::types","",35,null],[12,"register_num","dalvik::read::types::DebugInstruction","",35,null],[12,"name_id","","",35,null],[12,"type_id","","",35,null],[12,"sig_id","","",35,null],[13,"EndLocal","dalvik::read::types","",35,null],[12,"register_num","dalvik::read::types::DebugInstruction","",35,null],[13,"RestartLocal","dalvik::read::types","",35,null],[12,"register_num","dalvik::read::types::DebugInstruction","",35,null],[13,"SetPrologueEnd","dalvik::read::types","",35,null],[13,"SetEpilogueBegin","","",35,null],[13,"SetFile","","",35,null],[12,"name_id","dalvik::read::types::DebugInstruction","",35,null],[13,"SpecialOpcode","dalvik::read::types","",35,null],[12,"opcode","dalvik::read::types::DebugInstruction","",35,null],[17,"NO_INDEX","dalvik::read::types","",null,null],[17,"ACC_PUBLIC","","",null,null],[17,"ACC_PRIVATE","","",null,null],[17,"ACC_PROTECTED","","",null,null],[17,"ACC_STATIC","","",null,null],[17,"ACC_FINAL","","",null,null],[17,"ACC_SYNCHRONIZED","","",null,null],[17,"ACC_VOLATILE","","",null,null],[17,"ACC_BRIDGE","","",null,null],[17,"ACC_TRANSIENT","","",null,null],[17,"ACC_VARARGS","","",null,null],[17,"ACC_NATIVE","","",null,null],[17,"ACC_INTERFACE","","",null,null],[17,"ACC_ABSTRACT","","",null,null],[17,"ACC_STRICT","","",null,null],[17,"ACC_SYNTHETIC","","",null,null],[17,"ACC_ANNOTATION","","",null,null],[17,"ACC_ENUM","","",null,null],[17,"ACC_CONSTRUCTOR","","",null,null],[17,"ACC_DECLARED_SYNCHRONIZED","","",null,null],[17,"VISIBILITY_BUILD","","",null,null],[17,"VISIBILITY_RUNTIME","","",null,null],[17,"VISIBILITY_SYSTEM","","",null,null],[17,"VALUE_BYTE","","",null,null],[17,"VALUE_SHORT","","",null,null],[17,"VALUE_CHAR","","",null,null],[17,"VALUE_INT","","",null,null],[17,"VALUE_LONG","","",null,null],[17,"VALUE_FLOAT","","",null,null],[17,"VALUE_DOUBLE","","",null,null],[17,"VALUE_STRING","","",null,null],[17,"VALUE_TYPE","","",null,null],[17,"VALUE_FIELD","","",null,null],[17,"VALUE_METHOD","","",null,null],[17,"VALUE_ENUM","","",null,null],[17,"VALUE_ARRAY","","",null,null],[17,"VALUE_ANNOTATION","","",null,null],[17,"VALUE_NULL","","",null,null],[17,"VALUE_BOOLEAN","","",null,null],[17,"TYPE_HEADER_ITEM","","",null,null],[17,"TYPE_STRING_ID_ITEM","","",null,null],[17,"TYPE_TYPE_ID_ITEM","","",null,null],[17,"TYPE_PROTO_ID_ITEM","","",null,null],[17,"TYPE_FIELD_ID_ITEM","","",null,null],[17,"TYPE_METHOD_ID_ITEM","","",null,null],[17,"TYPE_CLASS_DEF_ITEM","","",null,null],[17,"TYPE_MAP_LIST","","",null,null],[17,"TYPE_TYPE_LIST","","",null,null],[17,"TYPE_ANNOTATION_SET_REF_LIST","","",null,null],[17,"TYPE_ANNOTATION_SET_ITEM","","",null,null],[17,"TYPE_CLASS_DATA_ITEM","","",null,null],[17,"TYPE_CODE_ITEM","","",null,null],[17,"TYPE_STRING_DATA_ITEM","","",null,null],[17,"TYPE_DEBUG_INFO_ITEM","","",null,null],[17,"TYPE_ANNOTATION_ITEM","","",null,null],[17,"TYPE_ENCODED_ARRAY_ITEM","","",null,null],[17,"TYPE_ANNOTATIONS_DIRECTORY_ITEM","","",null,null],[11,"fmt","","",9,null],[11,"from_reader","","Creates a new `PrototypeIdData` from a reader.",9,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_shorty_index","","Gets the shorty index.",9,null],[11,"get_return_type_index","","Gets the return type index.",9,null],[11,"get_parameters_offset","","Gets the parameter list offset, if the prototype has parameters.",9,null],[11,"fmt","","",10,null],[11,"from_reader","","Creates a new `FieldIdData` from a reader.",10,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_class_index","","Gets the index of the class of the field.",10,null],[11,"get_type_index","","Gets the index of the type of the class.",10,null],[11,"get_name_index","","Gets the index to the name of this field.",10,null],[11,"fmt","","",11,null],[11,"from_reader","","Creates a new `MethodIdData` from a reader.",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_class_index","","Gets the index of the class of the field.",11,null],[11,"get_prototype_index","","Gets the index of the prototype of the class.",11,null],[11,"get_name_index","","Gets the index to the name of this field.",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"assert_receiver_is_total_eq","","",12,null],[11,"clone","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"accessflags"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"accessflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"accessflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,null],[11,"is_all","","Returns `true` if all flags are currently set.",12,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,null],[11,"insert","","Inserts the specified flags in-place.",12,null],[11,"remove","","Removes the specified flags in-place.",12,null],[11,"toggle","","Toggles the specified flags in-place.",12,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,null],[11,"bitor","","Returns the union of the two sets of flags.",12,null],[11,"bitor_assign","","Adds the set of flags.",12,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,null],[11,"bitxor_assign","","Toggles the set of flags.",12,null],[11,"bitand","","Returns the intersection between the two sets of flags.",12,null],[11,"bitand_assign","","Disables all flags disabled in the set.",12,null],[11,"sub","","Returns the set difference of the two sets of flags.",12,null],[11,"sub_assign","","Disables all flags enabled in the set.",12,null],[11,"not","","Returns the complement of this set of flags.",12,null],[11,"extend","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"accessflags"}}],[11,"fmt","","",13,null],[11,"from_reader","","Creates a new `ClassDefData` from a reader.",13,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_class_id","","Gets the class ID (index in the *Type IDs* list) of the class definition.",13,null],[11,"get_access_flags","","Gets the access flags of the class definition.",13,null],[11,"get_superclass_id","","Gets the class ID (index in the *Type IDs* list) of the superclass, if it exists.",13,null],[11,"get_interfaces_offset","","Gets the offset of the list of interfaces implemented by the class, if it has any.",13,null],[11,"get_source_file_id","","Gets the index in the *String IDs* list of the file name where most of the class was, if it\nexists.",13,null],[11,"get_annotations_offset","","Gets the offset of the annotations of the class, if it has any.",13,null],[11,"get_class_data_offset","","Gets the offset for the data of the class, if it has any.",13,null],[11,"get_static_values_offset","","Gets the offset for the static values of the class, if it has any.",13,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"from_u8","","",32,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",33,null],[11,"from_reader","","",33,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",14,null],[11,"from_reader","","Creates an array from a reader.",14,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",15,null],[11,"get_name_index","","Gets the index of the name string.",15,null],[11,"get_value","","Gets the value of the annotation element.",15,null],[11,"fmt","","",16,null],[11,"from_reader","","Creates an annotation from a reader.",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_type_index","","Gets the index of the type of the annotation.",16,null],[11,"get_elements","","Gets the elements of the annotation.",16,null],[11,"fmt","","",17,null],[11,"from_reader","","Creates a new annotation item from a reader.",17,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_visibility","","Gets the visibility of the annotation item.",17,null],[11,"get_annotation","","Gets the annotation of the annotation item.",17,null],[11,"fmt","","",18,null],[11,"get_field_index","","Gets the index of the field with annotations in the *Field IDs* list.",18,null],[11,"get_annotations_offset","","Gets the offset of the annotations of the field.",18,null],[11,"fmt","","",19,null],[11,"get_method_index","","Gets the index of the method with annotations in the *Method IDs* list.",19,null],[11,"get_annotations_offset","","Gets the offset of the annotations of the method.",19,null],[11,"fmt","","",20,null],[11,"get_method_index","","Gets the index of the method with annotations in the *Method IDs* list.",20,null],[11,"get_annotations_offset","","Gets the offset of the annotations of the method.",20,null],[11,"fmt","","",21,null],[11,"from_reader","","Creates a new annotations directory from a reader.",21,{"inputs":[{"name":"r"},{"name":"offsetmap"}],"output":{"name":"result"}}],[11,"get_class_annotations_offset","","Gets the class annotations offset, if they exist.",21,null],[11,"get_field_annotations","","Gets the field annotations.",21,null],[11,"get_method_annotations","","Gets the method annotations.",21,null],[11,"get_parameter_annotations","","Gets the parameter annotations.",21,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"assert_receiver_is_total_eq","","",34,null],[11,"from_u16","","",34,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"from_reader","","",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_item_type","","",22,null],[11,"get_num_items","","",22,null],[11,"get_offset","","",22,null],[11,"fmt","","",22,null],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"fmt","","",25,null],[11,"from_reader","","",25,{"inputs":[{"name":"r"},{"name":"offsetmap"}],"output":{"name":"result"}}],[11,"read_fields","","",25,{"inputs":[{"name":"r"},{"name":"u32"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_methods","","",25,{"inputs":[{"name":"r"},{"name":"u32"},{"name":"vec"},{"name":"offsetmap"}],"output":{"name":"result"}}],[11,"read_string","","Reads a string from a reader.",36,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",26,null],[11,"from_reader","","",26,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_line_start","","",26,null],[11,"get_parameter_names","","",26,null],[11,"fmt","","",27,null],[11,"from_reader","","Reads the debug bytecode from a reader.",27,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"assert_receiver_is_total_eq","","",35,null],[11,"clone","","",35,null],[11,"from_reader","","",35,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",28,null],[11,"from_reader","","Reads a code item from the given reader.",28,{"inputs":[{"name":"r"},{"name":"offsetmap"}],"output":{"name":"result"}}],[11,"fmt","","",29,null],[11,"from_reader","","Creates a try item structure from a reader.",29,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",30,null],[11,"from_reader","","Reads a catch handler from a reader.",30,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",31,null],[11,"from_reader","","Creates a handler information structure from a reader object.",31,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","dalvik::read","",7,null],[11,"new","","Creates a new reader with the information from the header of the file.",7,{"inputs":[{"name":"header"},{"name":"r"}],"output":{"name":"dexreader"}}],[11,"read_data","","Reades data from a whole file and stores its information.",7,null],[11,"read_next","","Reads the next element",7,null],[11,"read_string_id_list","","Reads the list of string IDs.",7,null],[11,"read_type_id_list","","Reads the list of type IDs.",7,null],[11,"read_prototype_id_list","","Reads the list of prototype IDs.",7,null],[11,"read_field_id_list","","Reads the list of field IDs.",7,null],[11,"read_method_id_list","","Reads the list of method IDs.",7,null],[11,"read_class_def_list","","Reads the list of class definitions.",7,null],[11,"read_map","","Reads the map of the dex file.",7,null],[11,"read_type_lists","","Reads the list of types.",7,null],[11,"read_annotation_set_list","","Reads a list of annotation sets.",7,null],[11,"read_annotation_set","","Reads an annotation set.",7,null],[11,"read_class_data","","Reads the class information.",7,null],[11,"read_code_item","","Reads code information.",7,null],[11,"read_string_data","","Reads an actual string.",7,null],[11,"read_debug_info","","Reads debug information.",7,null],[11,"read_annotation","","Reads an annotation.",7,null],[11,"read_encoded_array","","Reads an encoded array.",7,null],[11,"read_annotation_directory","","",7,null],[11,"fmt","","",8,null],[11,"from_reader","","Reads a map object from a reader.",8,{"inputs":[{"name":"r"},{"name":"offsetmap"}],"output":{"name":"result"}}],[11,"get_item_list","","Gets the list of items.",8,null],[11,"get_num_items_for","","Gets the number of items for a particular item type.",8,null],[11,"fmt","dalvik","",0,null],[11,"from_file","","Reads the Dex data structure from the given path.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_reader","","Loads a new Dex data structure from the given reader.",0,{"inputs":[{"name":"r"},{"name":"u64"}],"output":{"name":"result"}}],[11,"verify_file","","Verifies the file at the given path.",0,null],[11,"verify_reader","","Verifies the file in the given reader.",0,null],[11,"from","","",0,{"inputs":[{"name":"dexreader"}],"output":{"name":"dex"}}],[11,"fmt","","",37,null],[11,"fmt","","",38,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null]],"paths":[[3,"Dex"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Header"],[3,"OffsetMap"],[4,"OffsetType"],[3,"DexReader"],[3,"Map"],[3,"PrototypeIdData"],[3,"FieldIdData"],[3,"MethodIdData"],[3,"AccessFlags"],[3,"ClassDefData"],[3,"Array"],[3,"AnnotationElement"],[3,"Annotation"],[3,"AnnotationItem"],[3,"FieldAnnotations"],[3,"MethodAnnotations"],[3,"ParameterAnnotations"],[3,"AnnotationsDirectory"],[3,"MapItem"],[3,"Field"],[3,"Method"],[3,"ClassData"],[3,"DebugInfo"],[3,"DebugBytecode"],[3,"CodeItem"],[3,"TryItem"],[3,"CatchHandler"],[3,"HandlerInfo"],[4,"Visibility"],[4,"Value"],[4,"ItemType"],[4,"DebugInstruction"],[3,"StringReader"],[3,"Prototype"],[3,"Field"],[3,"Method"],[3,"ClassDef"]]};
initSearch(searchIndex);
